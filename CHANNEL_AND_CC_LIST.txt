Drums.h:#define MUSO_CC_CV_1  1
Drums.h:#define MUSO_CC_CV_2  7
Drums.h:#define MUSO_CC_CV_3  11
Drums.h:#define MUSO_CC_CV_4  71
Drums.h:#define MUSO_CC_CV_5  74
Drums.h:#define MUSO_USE_PITCH_FOR  MUSO_CC_CV_5
Drums.h:#define MUSO_CV_CHANNEL     1   // channel to output CV CC's (ie envelopes to MidiMuso on this channel)
Drums.h:#define MIDI_CC_ALL_NOTES_OFF 123
Envelopes.h:#define ENV_CC_SPAN   8   // how many CCs to reserve per-envelope
Envelopes.h:#define ENV_CC_START  64  // what number CC the envelope controls begin at
Euclidian.h:#define CC_EUCLIDIAN_ACTIVE_STATUS_START  32    // active status of euclidian tracks starts at this CC and goes up to same+NUM_PATTERNS
Euclidian.h:#define CC_EUCLIDIAN_ACTIVE_STATUS_END    (CC_EUCLIDIAN_ACTIVE_STATUS_START + NUM_PATTERNS) // (50 when num_patterns = 2)
Euclidian.h:#define CC_EUCLIDIAN_SET_AUTO_PLAY        16    // enable/disable autoplaying on internal BPM
Euclidian.h:#define CC_EUCLIDIAN_SET_MUTATE_MODE      20    // 0 = NONE, 1 = SUBTLE, 2 = TOTAL
Euclidian.h:#define CC_EUCLIDIAN_SEED_MODIFIER        22    // euclidian random "bank" X
Euclidian.h:#define CC_EUCLIDIAN_SEED_MODIFIER_2      23    // euclidian random "bank" Y
Euclidian.h:#define CC_EUCLIDIAN_RESET_BEFORE_MUTATE  24    // reset sequences to 0 before mutation?
Euclidian.h:#define CC_EUCLIDIAN_SET_MINIMUM_PATTERN  25    // lowest number pattern to automutate
Euclidian.h:#define CC_EUCLIDIAN_SET_MAXIMUM_PATTERN  26    // highest number pattern to automutate
Euclidian.h:#define CC_EUCLIDIAN_SEED_USE_PHRASE      27    // increment seed according to BPM phrase (ie automutate)
Euclidian.h:#define CC_EUCLIDIAN_FILLS                28    // enable/disable fills on last bar of phrase, 0=off
Euclidian.h:#define CC_EUCLIDIAN_HIHAT_SHUFF          9     // enable/disable hihat shuffle, 0=off
Euclidian.h:#define CC_EUCLIDIAN_CLAP_FLAM            8     // enable/disable clap flam, 0=off
Harmony.hpp:#define CC_CHANNEL_PAD_PITCH        5     // set the MIDI channel to output the pads pitch on (default 2)
Harmony.hpp:#define CC_CHANNEL_PAD_ROOT         10    // set the MIDI channel to output the pad root on (default 1)
Harmony.hpp:#define CC_CHANNEL_BASS_OUT         12    // set the MIDI channel to output the bass on (default 4)
Harmony.hpp:#define CC_CHANNEL_BITBOX_KEYS      13    // set the MIDI channel to output the chords on (default 3)
Harmony.hpp:#define CC_MELODY_ROOT              11    // set the MIDI note to use as the root pitch, 48=C4
Harmony.hpp:#define CC_BASS_ONLY_NOTE_HELD      18    // cc to set bass to only play in external mode if note is held
Harmony.hpp:#define CC_BASS_SET_TIE_ON    6     // set which steps the Euclidian bass should tie on
Harmony.hpp:#define CC_BASS_MELODY_MODE 2
Harmony.hpp:#define CC_PAD_PITCH_MELODY_MODE  3
Harmony.hpp:#define CC_PAD_PITCH_OCTAVE_OFFSET  4
Harmony.hpp:#define CC_HARMONY_MELODY_MODE  29          // set mode to use for the chords output - 0=None, 1=Single note, 2=Chord, 3=Arpeggiate chord
Harmony.hpp:#define CC_HARMONY_MUTATE_MODE  30          // harmony mutation mode, 0=None, 1=Randomise
Harmony.hpp:#define CC_AUTO_PROGRESSION   31            // enable/disable playing auto chord progression
Harmony.hpp:#define CC_AUTO_CHORD_TYPE    105           // enable/disable playing automatic chord types (ie stacking triads)
Harmony.hpp:#define CC_AUTO_CHORD_INVERSION    106      // enable/disable playing automatic chord inversions
Harmony.hpp:#define CC_MELODY_OCTAVE_OFFSET   107       // octave offset for melody, 0=-2, 1=-1, 2=0, 3=+1, 4=+2, 5=+3
Harmony.hpp:#define CC_MELODY_SCALE   108               // choose scale to use, 0=major, 1=natural minor, 2=melodic minor, 3=harmonic minor, 4=lydian, 5=whole tone, 6=blues
Harmony.hpp:#define CC_MELODY_AUTO_SCALE   109          // enable/disable automatic changing of scale every phrase
MidiEcho.h:#define CC_MIDIECHO_ENABLED   21      // enable echoing of output back to DAW over USB
MidiInput.hpp:#define CC_SYNC_RATIO         110   // sync ratio of the envelope modulation in ticks, default 24
MidiInput.hpp:#define CC_CLOCK_TICK_RATIO   111   // send a clock tick for every X clock ticks, default 1
UI.h:#define CC_DEMO_MODE  19        // choose playback mode - 0=None, 1=Euclidian, 2=Euclidian with mutation, 3=Random triggers
UI.ino:#define CC_CHANNEL_BITBOX_DRUMS_OUT 14    // set the MIDI channel to output the shadow drum triggers (default 11) 
UI.ino:#define CC_CHANNEL_GATE_OUT   15    // set the MIDI channel to output the Muso drum triggers (default 16)

Harmony.hpp:#define MIDI_CHANNEL_BASS_IN        8     // channel to receive direct bass playing
Harmony.hpp:#define MIDI_CHANNEL_BASS_AUTO_IN   9     // channel to receive automatic bass notes
Harmony.hpp:#define MIDI_CHANNEL_MELODY_IN      3     // channel to receive direct melody/chords
Harmony.hpp:#define DEFAULT_MIDI_CHANNEL_BASS_OUT       4   //2     // channel to output bass notes on
Harmony.hpp:#define DEFAULT_MIDI_CHANNEL_BITBOX_KEYS 3 // bass output, but shifted an octave
Harmony.hpp:#define MIDI_CHANNEL_PAD_ROOT_IN    1
Harmony.hpp:#define MIDI_CHANNEL_PAD_PITCH_IN   2
Harmony.hpp:#define DEFAULT_MIDI_CHANNEL_PAD_ROOT_OUT   1
Harmony.hpp:#define DEFAULT_MIDI_CHANNEL_PAD_PITCH_OUT  2
Harmony.hpp:#define MIDI_CHANNEL_BASS_OUT       (harmony.get_midi_channel_bass_out())
Harmony.hpp:#define MIDI_CHANNEL_BITBOX_KEYS    (harmony.get_midi_channel_bitbox_keys())
Harmony.hpp:#define MIDI_CHANNEL_PAD_ROOT_OUT   (harmony.get_midi_channel_pads_root())
Harmony.hpp:#define MIDI_CHANNEL_PAD_PITCH_OUT  (harmony.get_midi_channel_pads_pitch())
MidiOutput.hpp:#define DEFAULT_MIDI_CHANNEL_BITBOX_OUT 11  // for the mirroring of drums
MidiOutput.hpp:#define MIDI_CHANNEL_BITBOX_DRUMS_OUT (midi_channel_bitbox_drums_out)

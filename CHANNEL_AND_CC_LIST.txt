include/Drums.h:#define MUSO_CC_CV_1  1
include/Drums.h:#define MUSO_CC_CV_2  7
include/Drums.h:#define MUSO_CC_CV_3  11
include/Drums.h:#define MUSO_CC_CV_4  71
include/Drums.h:#define MUSO_CC_CV_5  74
include/Drums.h:#define MUSO_CC_CV_6  93    // extended envelope, used for the midi note-triggered envelopes
include/Drums.h:#define MUSO_CC_CV_7  94    // extended envelope, used for the midi note-triggered envelopes
include/Drums.h:#define MUSO_CC_CV_8  73    // extended envelope, used for the midi note-triggered envelopes
include/Drums.h:#define MUSO_CC_CV_9  72    // extended envelope, used for the midi note-triggered envelopes
include/Drums.h:#define MUSO_USE_PITCH_FOR  MUSO_CC_CV_5        // because my CV5 output doesn't work!
include/Drums.h:#define MUSO_CV_CHANNEL     1   // channel to output CV CC's (ie envelopes to MidiMuso on this channel)
include/Drums.h:#define MIDI_CC_ALL_NOTES_OFF 123
include/Envelopes.h:#define ENV_CC_SPAN   8   // how many CCs to reserve per-envelope
include/Envelopes.h:#define ENV_CC_START  64  // what number CC the envelope controls begin at
include/Euclidian.h:#define CC_EUCLIDIAN_MUTATE_DENSITY       7     // automatically mutate density on/off
include/Euclidian.h:#define CC_EUCLIDIAN_ACTIVE_STATUS_START  32    // active status of euclidian tracks starts at this CC and goes up to same+NUM_PATTERNS
include/Euclidian.h:#define CC_EUCLIDIAN_ACTIVE_STATUS_END    (CC_EUCLIDIAN_ACTIVE_STATUS_START + NUM_PATTERNS) // (50 when num_patterns = 2)
include/Euclidian.h:#define CC_EUCLIDIAN_SET_AUTO_PLAY        16    // enable/disable autoplaying on internal BPM
include/Euclidian.h:#define CC_EUCLIDIAN_SET_MUTATE_MODE      20    // 0 = NONE, 1 = SUBTLE, 2 = TOTAL
include/Euclidian.h:#define CC_EUCLIDIAN_SEED_MODIFIER        22    // euclidian random "bank" X
include/Euclidian.h:#define CC_EUCLIDIAN_SEED_MODIFIER_2      23    // euclidian random "bank" Y
include/Euclidian.h:#define CC_EUCLIDIAN_RESET_BEFORE_MUTATE  24    // reset sequences to 0 before mutation?
include/Euclidian.h:#define CC_EUCLIDIAN_SET_MINIMUM_PATTERN  25    // lowest number pattern to automutate
include/Euclidian.h:#define CC_EUCLIDIAN_SET_MAXIMUM_PATTERN  26    // highest number pattern to automutate
include/Euclidian.h:#define CC_EUCLIDIAN_SEED_USE_PHRASE      27    // increment seed according to BPM phrase (ie automutate)
include/Euclidian.h:#define CC_EUCLIDIAN_FILLS                28    // enable/disable fills on last bar of phrase, 0=off
include/Euclidian.h:#define CC_EUCLIDIAN_DENSITY              114   // experimental: global density of euclidian patterns
include/Euclidian.h:#define CC_EUCLIDIAN_HIHAT_SHUFF          9     // enable/disable hihat shuffle, 0=off
include/Euclidian.h:#define CC_EUCLIDIAN_CLAP_FLAM            8     // enable/disable clap flam, 0=off
include/Harmony.hpp:#define CC_BASS_SET_ARP_MODE        17    // cc to set the bass arp mode
include/Harmony.hpp:#define CC_HARMONY_MUTATE_MODE      30    // overall harmony mutation mode, 0=None, 1=Randomise
include/Harmony.hpp:#define CC_AUTO_PROGRESSION         31    // enable/disable playing auto chord progression
include/Harmony.hpp:#define CC_AUTO_CHORD_TYPE          105   // enable/disable playing automatic chord types (ie stacking triads)
include/Harmony.hpp:#define CC_AUTO_CHORD_INVERSION     106   // enable/disable playing automatic chord inversions
include/Harmony.hpp:#define CC_MELODY_SCALE             108   // choose scale to use, 0=major, 1=natural minor, 2=melodic minor, 3=harmonic minor, 4=lydian, 5=whole tone, 6=blues
include/Harmony.hpp:#define CC_MELODY_AUTO_SCALE        109   // enable/disable automatic changing of scale every phrase
include/Harmony.hpp:#define CC_MELODY_ROOT              11    // set the MIDI note to use as the root pitch, 48=C4
include/Harmony.hpp:#define CC_HARMONY_ONLY_NOTE_HELD   18    // cc to set bass to only play in external mode if note is held
include/Harmony.hpp:#define CC_CHANNEL_BASS_OUT         12    // output 0: set the MIDI channel to output the bass on (default 4)
include/Harmony.hpp:#define CC_BASS_MELODY_MODE         2     // output 0: set mode to use for the bass output - 0=None, 1=Single note, 2=Chord, 3=Arpeggiate chord
include/Harmony.hpp:#define CC_BASS_SET_TIE_ON          6     // output 0: set which steps the Euclidian bass should tie on
include/Harmony.hpp:#define CC_CHANNEL_BITBOX_KEYS      13    // output 1: value received on this CC sets the MIDI channel to output the chords on (default 3)
include/Harmony.hpp:#define CC_HARMONY_MELODY_MODE      29    // output 1: value received on this CC sets the mode to use for the chords output - 0=None, 1=Single note, 2=Chord, 3=Arpeggiate chord
include/Harmony.hpp:#define CC_MELODY_OCTAVE_OFFSET     107   // output 1: octave offset for melody, 0=-2, 1=-1, 2=0, 3=+1, 4=+2, 5=+3
include/Harmony.hpp:#define CC_CHANNEL_PAD_ROOT         10    // output 2: set the MIDI channel to output the pad root on (default 1)
include/Harmony.hpp:#define CC_PAD_ROOT_MELODY_MODE     112   // output 2: set mode to use for the chords output - 0=None, 1=Single note, 2=Chord, 3=Arpeggiate chord
include/Harmony.hpp:#define CC_PAD_ROOT_OCTAVE_OFFSET        113   // output 2: octave offset for melody, 0=-2, 1=-1, 2=0, 3=+1, 4=+2, 5=+3
include/Harmony.hpp:#define CC_CHANNEL_PAD_PITCH        5     // output 3: set the MIDI channel to output the pads pitch on (default 2)
include/Harmony.hpp:#define CC_PAD_PITCH_MELODY_MODE    3     // output 3: set mode to use for the pitch output - 0=None, 1=Single note, 2=Chord, 3=Arpeggiate chord
include/Harmony.hpp:#define CC_PAD_PITCH_OCTAVE_OFFSET  4     // output 3: set octave offset (-2 to +3)
include/MidiEcho.h:#define CC_MIDIECHO_ENABLED   21      // enable echoing of output back to DAW over USB
include/MidiInput.hpp:#define CC_SYNC_RATIO         110   // sync ratio of the envelope modulation in ticks, default 24
include/MidiInput.hpp:#define CC_CLOCK_TICK_RATIO   111   // send a clock tick for every X clock ticks, default 1
include/UI.h:#define CC_DEMO_MODE  19        // choose playback mode - 0=None, 1=Euclidian, 2=Euclidian with mutation, 3=Random triggers

include/Config.h:#define DEFAULT_MIDI_CHANNEL_BITBOX_OUT     11   // for mirroring drum triggers to the bitbox pads
include/Config.h:#define DEFAULT_MIDI_CHANNEL_PAD_ROOT_OUT   1
include/Config.h:#define DEFAULT_MIDI_CHANNEL_PAD_PITCH_OUT  2
include/Config.h:#define DEFAULT_MIDI_CHANNEL_BITBOX_KEYS    3 // bass output, but shifted an octave
include/Config.h:#define DEFAULT_MIDI_CHANNEL_BASS_OUT       4   //2     // channel to output bass notes on
include/Envelopes.h:#define MIDI_CHANNEL_EXTENDED_ENVELOPES   11  // channel to receive extended envelope info on 
include/Harmony.hpp:#define MIDI_CHANNEL_BASS_IN        8     // channel to receive direct bass playing
include/Harmony.hpp:#define MIDI_CHANNEL_BASS_AUTO_IN   9     // channel to receive automatic bass notes
include/Harmony.hpp:#define MIDI_CHANNEL_MELODY_IN      3     // channel to receive direct melody/chords
include/Harmony.hpp:#define MIDI_CHANNEL_PAD_ROOT_IN    1   //DEFAULT_MIDI_CHANNEL_PAD_ROOT_IN
include/Harmony.hpp:#define MIDI_CHANNEL_PAD_PITCH_IN   2   //DEFAULT_MIDI_CHANNEL_PAD_PITCH_IN
include/Harmony.hpp:#define MIDI_CHANNEL_BASS_OUT       (harmony.get_midi_channel_bass_out())       // output 0
include/Harmony.hpp:#define MIDI_CHANNEL_BITBOX_KEYS    (harmony.get_midi_channel_bitbox_keys())    // output 1
include/Harmony.hpp:#define MIDI_CHANNEL_PAD_ROOT_OUT   (harmony.get_midi_channel_pads_root())      // output 2
include/Harmony.hpp:#define MIDI_CHANNEL_PAD_PITCH_OUT  (harmony.get_midi_channel_pads_pitch())     // output 3
include/MidiOutput.hpp:#define MIDI_CHANNEL_BITBOX_DRUMS_OUT (midi_channel_bitbox_drums_out)

include/Envelopes.h:#define TRIGGER_CHANNEL_OFF 20
